import lang.ast.Program;
import lang.ast.StandardPrettyPrinter;
import lang.ast.SoufflePrettyPrinter;
import lang.io.FileUtil;
import lang.evaluation.BottomUpNaiveIterative;
import lang.evaluation.SouffleEvaluation;

aspect Configuration {
	syn String Description.inputFile() = getInput().getPath();
	
	syn String Description.inputFileName() {
		return FileUtil.fileName(inputFile());
	}
	
	syn Evaluation Description.evaluation() = getTask().getEvaluation();
	
	syn String Description.outputDir() {
		for(ConfigParam param : evaluation().getParamss()) {
			if(param.isOutputDir())
				return FileUtil.normalize(((OutputDir) param).getPath());
		}
		return System.getProperty("user.dir");
	}
	
	syn String Description.factsDir() {
		for(ConfigParam param : evaluation().getParamss()) {
			if(param.isFactsDir())
				return FileUtil.normalize(((FactsDir) param).getPath());
		}
		return System.getProperty("user.dir");
	}
	
	syn boolean ConfigParam.isOutputDir()  = false;
	syn boolean OutputDir.isOutputDir()    = true;
	
	syn boolean ConfigParam.isFactsDir()   = false;
	syn boolean FactsDir.isFactsDir()      = true;
}

aspect BottomUpNaiveConfiguration {
	syn boolean Description.isBottomUpNaive() = evaluation().isBottomUpNaive();
	syn boolean Evaluation.isBottomUpNaive() = false;
	syn boolean BottomUpNaive.isBottomUpNaive()  = true;
}

aspect SouffleConfiguration {
	syn boolean Description.isSouffle() = evaluation().isSouffle();
	syn boolean Evaluation.isSouffle() = false;
	syn boolean Souffle.isSouffle()     = true;
	
	syn boolean SouffleParam.isOutputFileName()   = false;
	syn boolean OutputFileName.isOutputFileName() = true;
	
	inh String Souffle.inputFileName();
	eq Description.getChild().inputFileName() = inputFileName();
	
	syn String Souffle.outputFileName() {
		for(SouffleParam param : getSouffleSpecificParamss()) {
			if(param.isOutputFileName())
				return ((OutputFileName) param).getName();
		}
		return FileUtil.changeExtension(inputFileName(), ".dl");
	}
}

aspect Evaluation {
	public lang.evaluation.Evaluation Description.evaluationMethod() {
		return getTask().evaluationMethod();
	}
	
	public abstract lang.evaluation.Evaluation Task.evaluationMethod();
	
	public lang.evaluation.Evaluation Eval.evaluationMethod() {
		Evaluation ev = getEvaluation();
		if(ev.isSouffle()) 
			return new SouffleEvaluation();
		if(ev.isBottomUpNaive()) 
			return new BottomUpNaiveIterative();
		return null;
	}
	
	public lang.evaluation.Evaluation BottomUpNaive.evaluationMethod() {
		return new BottomUpNaiveIterative();
	}
	
	public lang.evaluation.Evaluation PrettyPrint.evaluationMethod() {
		Evaluation ev = getEvaluation();
		
		if(ev.isSouffle()) {
			return new lang.evaluation.Evaluation() {
				public void evaluate(Program program, Description descr) {
					program.soufflePrint (
							new SoufflePrettyPrinter<Program>(new PrintStream(System.out)));
				}
			};
		
		}
		if(ev.isBottomUpNaive()){		
			return new lang.evaluation.Evaluation() {
				public void evaluate(Program program, Description descr) {
					program.prettyPrint (
							new StandardPrettyPrinter<Program>(new PrintStream(System.out)));
				}
			};
		}
		return null;
	}
}