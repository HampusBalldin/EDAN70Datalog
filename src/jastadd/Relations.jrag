import java.util.HashSet;
import java.util.HashMap;
import java.util.TreeSet;
import java.util.Comparator;
import lang.relation.Relation;
import lang.relation.PseudoTuple;

aspect Arity {
    syn int Literal.arity();
    eq NEGLiteral.arity() = 1;
    eq EDBLiteral.arity() = 2;
    eq Atom.arity() = getNumTerms();
    syn int PredicateSymbol.arity() = literal().arity();
    
    syn HashSet<Integer> FormalPredicate.arities() {
    	HashSet<Integer> arities = new HashSet<Integer>();
    	for(PredicateSymbol pred : predicates()) {
        	arities.add(pred.arity());
        }
        return arities;
    }
    
    syn HashSet<Integer> FormalPredicate.realArities() {
        HashSet<Integer> realArities = new HashSet<Integer>(arities());
        realArities.remove(-1);
        return realArities;
    }
    
    syn boolean FormalPredicate.isUniqueArity() {
        return realArities().size() <= 1;
    }

    syn int FormalPredicate.realArity() {
        if(!isUniqueArity() || realArities().size() == 0) return 0;
        return realArities().iterator().next();
    }
    
   // FormalPredicate contributes ("Different Arities for predicate symbol: " + predicateName())
   //     when !uniqueArity() && arities().size() != 1
   //     to Program.semanticErrors();
}

aspect Relation {
	public Relation FormalPredicate.relation;
	
	syn PseudoTuple FormalLiteral.toTuple();
	eq Atom.toTuple() = new PseudoTuple(this);
	eq EDBLiteral.toTuple() = new PseudoTuple(this);
	
	syn PseudoTuple Literal.toTuple();
	eq NEGLiteral.toTuple() = getFormalLiteral().toTuple();
}

aspect Rules {
	syn HashSet<Rule> FormalPredicate.useInRules() {
		HashSet<Rule> rules = new HashSet<Rule>();
		for(PredicateSymbol pred : predicates()) {
			if(pred.isUse()) {
				rules.add((Rule)pred.literal().clause());
			}
		}
		return rules;
	}

	syn HashSet<Clause> FormalPredicate.definedIn() {
		HashSet<Clause> rules = new HashSet<Clause>();
		for(PredicateSymbol pred : predicates()) {
			if(pred.isDef()) {
				rules.add(pred.literal().clause());
			}
		}
		return rules;
	}
}

aspect DependencyGraph {
	syn HashSet<FormalPredicate> FormalPredicate.dependsOn() {
		HashSet<FormalPredicate> defIn = new HashSet<FormalPredicate>();
		for(Clause c : definedIn()) {
			if(!c.isRule())continue;
			Rule r = (Rule) c;
			for(Literal l : r.getBodys()) {
				if(l.predicate().isNeg()) {
					NEGLiteral nl = (NEGLiteral) l;
					defIn.add(nl.getFormalLiteral().predicate().formalpredicate());
				} else {
					defIn.add(l.predicate().formalpredicate());
				}
			}
		}
		
		for(PredicateRef ref : predicateRefs()) {
			if(ref.literal().isEDB()) {
				defIn.add(ref.literal().predicate().formalpredicate());
			}
		}
		
		if(hasRecursiveEDB()) {
			defIn.add(formalPredicateMap().get("EDB"));
		}
		return defIn;
	}	
}
