import java.util.Collections;
import java.util.ArrayList;
import lang.relation.PseudoTuple;

import lang.io.CollectUtil;
aspect TestInfo {

	public void Program.collectObjectInfo(StringBuilder sb) {
		sb.append("OBJECTS: {");
		for(Constant c : objects){
			sb.append(c.constantValue());
			sb.append(",");
		}
		if(objects.size() > 0) sb.deleteCharAt(sb.length() - 1);
		sb.append("}");
	}

	public void Program.collectFileObjectInfo(StringBuilder sb) {
		sb.append("FILE_CONSTANTS: {");
		for(Constant c : uniqueFileObjects()){
			sb.append(c.constantValue());
			sb.append(",");
		}
		if(uniqueFileObjects().size() > 0) sb.deleteCharAt(sb.length() - 1);
		sb.append("}");
	}
	
	public void PredicateSymbol.collectInfo(StringBuilder sb) {
		if(isUse()) sb.append("USE");
		if(isDef()) sb.append("DEF");
		if(isFileFact()) sb.append("FILE_FACT");
		if(isEDBFact()) sb.append("EDB_FACT");
	}
	
	public void FormalPredicate.collectPredicateInfo(StringBuilder sb) {
		ArrayList<PredicateSymbol> predsList = new ArrayList<PredicateSymbol>(predicates());
		if(predsList.size() == 0) return;
		
		ArrayList<String> predInfo = new ArrayList<String>();
		for(PredicateSymbol pred : predsList) {
			StringBuilder sb2 = new StringBuilder();
			pred.collectInfo(sb2);
			predInfo.add(sb2.toString());
		}
		sb.append(predicateName()).append(" Arity: ").append(realArity()).append(",").append(" [");
		if(predsList.size() == 1) {
			sb.append(predInfo.get(0)).append("]");
			return;
		}
		Collections.sort(predInfo);
		sb.append(predInfo.get(0));
		for(int i = 1; i != predInfo.size(); ++i) {
			sb.append(",").append(predInfo.get(i));
		}
		sb.append("]");
	}
	
	public void Program.collectPredicateInfo(StringBuilder sb) {
		List<FormalPredicate> spreds = getFormalPredicates();
		CollectUtil<FormalPredicate> collector = new CollectUtil<FormalPredicate>();
		collector.collectList("PREDICATES: {", "\n}", "\n", sb, spreds, new CollectUtil.Collector<FormalPredicate> (){
			public void collect(FormalPredicate t, StringBuilder sb) {
				t.collectPredicateInfo(sb);
			}
		});
	}
	
	public void Program.collectFileRelationInfo(StringBuilder sb) {
		for(FormalPredicate sp : getFormalPredicates()) {
			sp.fileRelation().collectRelation(sb);
		}
	}
	
	public void Program.collectRelationInfo(StringBuilder sb) {
		for(FormalPredicate sp : getFormalPredicates()) {
			sp.relation.collectRelation(sb);
		}
	}
	
	public void Term.collectInfo(StringBuilder sb) {
		sb.append(string());
	}
	
	public void RealLiteral.collectInfo(StringBuilder sb) {
		sb.append(getPredicate().getID());
		CollectUtil<Term> collector = new CollectUtil<Term>();
		collector.collectList("(", ")", ",", sb, getTermss(), new CollectUtil.Collector<Term> (){
			public void collect(Term t, StringBuilder sb) {
				t.collectInfo(sb);
			}
		});
	}
	
	public void Rule.collectInfo(StringBuilder sb) {
		CollectUtil<RealLiteral> collector = new CollectUtil<RealLiteral>();
		collector.collectList("", "", ",", sb, getHeadss(), new CollectUtil.Collector<RealLiteral> (){
			public void collect(RealLiteral l, StringBuilder sb) {
				l.collectInfo(sb);
			}
		});
		sb.append(" :- ");
		collector.collectList("", "", ", ", sb, getBodys(), new CollectUtil.Collector<RealLiteral> (){
			public void collect(RealLiteral l, StringBuilder sb) {
				l.collectInfo(sb);
			}
		});
		
		sb.append("\n");
		sb.append("BODYTUPLES {\n");
		for(PseudoTuple r : bodyTuples()) {
			r.collectTuple(sb);
			sb.append("\n");
		}
		sb.append("}");
	}
	
	@Override
	public String FormalPredicate.toString() {
		return "FP_" + predicateName();
	}
	
	public void FormalPredicate.collectRuleInfo(StringBuilder sb) {
		HashSet<Rule> use_rules = useInRules();
		sb.append("RULE USE [" + predicateName() + "] {\n");
		for(Rule r : use_rules) {
			r.collectInfo(sb);
			sb.append("\n");
		}
		sb.append("}\n");
		HashSet<Rule> def_rules = definedInRules();
		sb.append("RULE DEF [" + predicateName() + "] {\n");
		for(Rule r : def_rules) {
			r.collectInfo(sb);
			sb.append("\n");
		}
		sb.append("}");
	}
	
	public void Program.collectRuleInfo(StringBuilder sb) {
		CollectUtil<FormalPredicate> collector = new CollectUtil<FormalPredicate>();
		collector.collectList("", "", "\n", sb, getFormalPredicates(), new CollectUtil.Collector<FormalPredicate> (){
			public void collect(FormalPredicate l, StringBuilder sb) {
				l.collectRuleInfo(sb);
			}
		});
	}
	
	public void Program.collectInitialMetaInfo(StringBuilder sb) {
		collectFileObjectInfo(sb);
		sb.append("\n");
		collectPredicateInfo(sb);
		sb.append("\n");
		sb.append("FILE RELATION: {");
		collectFileRelationInfo(sb);
		sb.append("}\n");
	}
	
	public void Program.collectMetaInfo(StringBuilder sb) {
		collectInitialMetaInfo(sb);
		sb.append("INITIAL RELATION: {");
		collectRelationInfo(sb);
		sb.append("}\n");
		sb.append("RULE INFO: {\n");
		collectRuleInfo(sb);
		sb.append("}");
		sb.append("OBJECTS INFO: {\n");
		collectObjectInfo(sb);
		sb.append("}");
	}
}
