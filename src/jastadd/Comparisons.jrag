aspect Types {
	syn boolean Constant.isString();
	syn boolean Constant.isInt();
	eq StringConstant.isString()  =  true;
	eq StringConstant.isInt()     =  false;
	eq IntConstant.isString()     =  false;
	eq IntConstant.isInt()        =  true;
	
	syn boolean Term.isVariable();
	eq Constant.isVariable() = false;
	eq Variable.isVariable() = true;
}

aspect Conversion {
	syn int IntConstant.intValue() = Integer.parseInt(getNUMERAL());
	public abstract String Constant.constantValue();
	public String StringConstant.constantValue() {
		return getSTRING();
	}
	public String IntConstant.constantValue() {
		return getNUMERAL();
	}
	
	public abstract String Term.string();
	public String Constant.string() { return constantValue(); }
	public String Variable.string() { return getID(); }
}

aspect Comparison {
	public class CompareConstant implements Comparator<Constant> {
		@Override
		public int compare(Constant c1, Constant c2) {
			if(c1.isInt() && c2.isInt()) {
				int i1 = ((IntConstant)c1).intValue();
				int i2 = ((IntConstant)c2).intValue();
				return i1 < i2 ? -1 : i1 == i2 ? 0 : 1;
			}
			if(c1.isString() && c2.isString()) 
                return ((StringConstant)c1).getSTRING().compareTo(((StringConstant)c2).getSTRING());
			return c1.isInt() ? -1 : 1;
		}
	}
	public static final CompareConstant Constant.constantComparator = new CompareConstant();
	
	@Override
	public boolean Constant.equals(Object o) {
		if(!(o instanceof Constant)) return false;
		return constantComparator.compare(this, (Constant)o) == 0;
	}
	
	public class CompareTerm implements Comparator<Term> {
		@Override
		public int compare(Term t1, Term t2) {
			if(t1.isVariable() && t2.isVariable())
				return ((Variable)t1).getID().compareTo(((Variable)t2).getID());
			if(!t1.isVariable() && !t2.isVariable()) 
				return Constant.constantComparator.compare((Constant)t1, (Constant)t2);
			return t1.isVariable() ? -1 : 1;
		}
	}

	public static final CompareTerm Term.termComparator = new CompareTerm();
	@Override
	public boolean Term.equals(Object o) {
		if(!(o instanceof Term)) return false;
		return termComparator.compare(this, (Term)o) == 0;
	}
	
	public class ComparePredicateSymbol implements Comparator<PredicateSymbol> {
		@Override
		public int compare(PredicateSymbol p1, PredicateSymbol p2) {
			return p1.getID().compareTo(p2.getID());
		}
	}
	
	public static final ComparePredicateSymbol PredicateSymbol.predicateSymbolComparator = new ComparePredicateSymbol();
	@Override
	public boolean PredicateSymbol.equals(Object o) {
		if(!(o instanceof PredicateSymbol)) return false;
		return predicateSymbolComparator.compare(this, (PredicateSymbol)o) == 0;
	}
	
}
