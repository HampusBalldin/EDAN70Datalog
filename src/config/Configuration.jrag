import lang.ast.Program;
import lang.ast.StandardPrettyPrinter;
import lang.ast.SoufflePrettyPrinter;
import lang.io.FileUtil;
import lang.evaluation.BottomUpNaiveIterative;
import lang.evaluation.SouffleEvaluation;
import lang.evaluation.TypeProgEvaluation;

aspect Configuration {
	syn String Description.inputFile() = getInput().getPath();
	
	syn String Description.inputFileName() {
		return FileUtil.fileName(inputFile());
	}
	syn Evaluation Description.evalParams() = getTask().getEvaluation();
	
	syn String Description.outputDir() {
		for(ConfigParam param : evalParams().getParamss()) {
			if(param.isOutputDir())
				return FileUtil.normalize(((OutputDir) param).getPath());
		}
		return System.getProperty("user.dir");
	}
	
	syn String Description.factsDir() {
		for(ConfigParam param : evalParams().getParamss()) {
			if(param.isFactsDir())
				return FileUtil.normalize(((FactsDir) param).getPath());
		}
		return System.getProperty("user.dir");
	}
	
	syn boolean ConfigParam.isOutputDir()  = false;
	syn boolean OutputDir.isOutputDir()    = true;
	
	syn boolean ConfigParam.isFactsDir()   = false;
	syn boolean FactsDir.isFactsDir()      = true;
}

aspect BottomUpNaiveConfiguration {
	syn boolean Description.isBottomUpNaive()    =  evalParams().isBottomUpNaive();
	syn boolean Evaluation.isBottomUpNaive()     =  false;
	syn boolean BottomUpNaive.isBottomUpNaive()  =  true;
}

aspect TypeProgConfiguration {
	syn boolean Description.isTypeProg()  =  evalParams().isTypeProg();
	syn boolean Evaluation.isTypeProg()   =  false;
	syn boolean TypeProg.isTypeProg()     =  true;
}

aspect SouffleConfiguration {
	syn boolean Description.isSouffle()  =  evalParams().isSouffle();
	syn boolean Evaluation.isSouffle()   =  false;
	syn boolean Souffle.isSouffle()      =  true;
	
	syn boolean SouffleParam.isOutputFileName()   = false;
	syn boolean OutputFileName.isOutputFileName() = true;
	
	inh String Souffle.inputFileName();
	eq Description.getChild().inputFileName() = inputFileName();
	
	syn String Souffle.outputFileName() {
		for(SouffleParam param : getSouffleSpecificParamss()) {
			if(param.isOutputFileName())
				return ((OutputFileName) param).getName();
		}
		return FileUtil.changeExtension(inputFileName(), ".dl");
	}
}

aspect Evaluation {
	public lang.evaluation.Evaluation Description.evaluationMethod() {
		return getTask().evaluationMethod();
	}
	public abstract lang.evaluation.Evaluation Task.evaluationMethod();
	syn lang.evaluation.Evaluation PrettyPrint.evaluationMethod()  =  getEvaluation().pretty();
	syn lang.evaluation.Evaluation Eval.evaluationMethod()         =  getEvaluation().eval();

    syn lang.evaluation.Evaluation Evaluation.eval();
    eq BottomUpNaive.eval()  =  new BottomUpNaiveIterative();
    eq Souffle.eval()        =  new SouffleEvaluation();
    eq TypeProg.eval()       =  new TypeProgEvaluation();

    syn lang.evaluation.Evaluation Evaluation.pretty();
    eq BottomUpNaive.pretty() {
        return new lang.evaluation.Evaluation() {
            public void evaluate(Program program, Description descr) {
                program.prettyPrint (
                    new StandardPrettyPrinter<Program>(new PrintStream(System.out)));
            }
        };
    }
    eq Souffle.pretty() {
        return new lang.evaluation.Evaluation() {
            public void evaluate(Program program, Description descr) {
                program.soufflePrint (
                        new SoufflePrettyPrinter<Program>(new PrintStream(System.out)));
            }
        };
    }
    eq TypeProg.pretty() = eval();
}
