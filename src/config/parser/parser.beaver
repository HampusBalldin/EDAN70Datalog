%class "ConfigParser";
%package "lang.ast.config";

%embed {:
	static public class SyntaxError extends RuntimeException { public SyntaxError(String msg) {super(msg);}}
	// Disable syntax error recovery
	protected void recoverFromError(Symbol token, TokenStream in) {
		throw new SyntaxError("Cannot recover from the syntax error");
	}
:};

%terminals FILEPATH, SEP, BOTTOMUPNAIVE, SOUFFLE, OUTDIR, FACTSDIR, SOUFFLEOUT, PRETTYPRINT, EVAL, TYPE_PROG;

%typeof  descr                    =  "Description";
%typeof  evaluation               =  "Evaluation";
%typeof  souffle                  =  "Souffle";
%typeof  bottomupnaive            =  "BottomUpNaive";
%typeof  pretty                   =  "PrettyPrint";
%typeof type_prog                 =  "TypeProg";
%typeof  eval                     =  "Eval";
%typeof  task                     =  "Task";
%typeof  file_path                =  "FilePath";
%typeof  input_file               =  "InputFile";
%typeof  output_dir               =  "OutputDir";
%typeof  facts_dir                =  "FactsDir";
%typeof  config_param             =  "ConfigParam";
%typeof  config_params            =  "List";
%typeof  config_params_no_empty   =  "List";
%typeof  souffle_params           =  "List";
%typeof  souffle_params_no_empty  =  "List";
%typeof  souffle_param            =  "SouffleParam";
%typeof  output_file_name         =  "OutputFileName";

%goal descr;

descr = task.t input_file.fn {: return new Description(t, fn); :};

task = pretty
     | eval
     ;

pretty     =  PRETTYPRINT SEP evaluation.eval {: return new PrettyPrint(eval); :};
eval       =  EVAL        SEP evaluation.eval {: return new Eval(eval); :};

evaluation = bottomupnaive
           | souffle
           | type_prog
           ;

bottomupnaive =  BOTTOMUPNAIVE config_params.params {: return new BottomUpNaive(params); :};
souffle       =  SOUFFLE config_params.params souffle_params.s_params {: return new Souffle(params, s_params); :};
type_prog     =  TYPE_PROG config_params.params {: return new TypeProg(); :};

souffle_params = souffle_params_no_empty
          | /* epsilon */ {: return new List(); :}
          ;

souffle_params_no_empty = souffle_param.param {: return new List().add(param); :}
                       | souffle_params_no_empty.list souffle_param.param {: return list.add(param); :} 
                       ;

souffle_param = output_file_name;

config_params = config_params_no_empty
          | /* epsilon */ {: return new List(); :}
          ;

config_params_no_empty = config_param.param {: return new List().add(param); :}
                       | config_params_no_empty.list config_param.param {: return list.add(param); :} 
                       ;

config_param  = file_path;

file_path     = output_dir
              | facts_dir
              ;

input_file        =  FILEPATH.fn {: return new InputFile(fn); :};
output_dir        =  OUTDIR FILEPATH.fn {: return new OutputDir(fn); :};
facts_dir         =  FACTSDIR FILEPATH.fn {: return new FactsDir(fn); :};
output_file_name  =  SOUFFLEOUT FILEPATH.fn {: return new OutputFileName(fn); :};
