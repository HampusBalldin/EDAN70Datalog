%class "LangParser";
%package "lang.ast";

%embed {:
	static public class SyntaxError extends RuntimeException { public SyntaxError(String msg) {super(msg);}}
	// Disable syntax error recovery
	protected void recoverFromError(Symbol token, TokenStream in) {
		throw new SyntaxError("Cannot recover from the syntax error");
	}
:};

%terminals VAR_ID, PRED_ID, PRED_REF, LPARA, RPARA, NUMERAL, STRING, DOT, COMMA, IMPLIED_BY, EDB, NOT;

%typeof  program             =  "Program";
%typeof  clause              =  "Clause";
%typeof  literal             =  "Literal";
%typeof  formal_literal      =  "FormalLiteral";
%typeof  pred_literal        =  "PredicateLiteral";
%typeof  edb_literal         =  "EDBLiteral";
%typeof  neg_literal         =  "NEGLiteral";
%typeof  atom                =  "Atom";
%typeof  pred_sym            =  "PredicateSymbol";
%typeof  pred_ref            =  "PredicateRef";
%typeof  variable            =  "Variable";
%typeof  constant            =  "Constant";
%typeof  int_constant        =  "IntConstant";
%typeof  string_constant     =  "StringConstant";
%typeof  term                =  "Term";
%typeof  term_list           =  "List";
%typeof  term_list_no_empty  =  "List";
%typeof  lit_list            =  "List";
%typeof  form_lit_list       =  "List";
%typeof  clause_list         =  "List";
%typeof  fact                =  "Fact";
%typeof  rule                =  "Rule";

%goal program;

program =  clause_list.list {: return new Program(list); :};
clause_list = clause.c {: return new List().add(c); :}
            | clause_list.list clause.c {: return list.add(c); :}
            ;

clause = rule
       | fact
       ;

rule = form_lit_list.heads IMPLIED_BY lit_list.body DOT {: return new Rule(heads, body); :};
fact = form_lit_list.heads DOT {: return new Fact(heads); :};


literal = formal_literal
        | pred_literal
        ;
        
formal_literal = edb_literal
			   | atom
			   ;
			  
pred_literal = neg_literal
             ;

atom = pred_sym.pred LPARA term_list.terms RPARA {: return new Atom(pred, terms); :};

edb_literal = EDB LPARA pred_ref.pred COMMA term.filelocs RPARA {: return new EDBLiteral(pred, filelocs); :};

neg_literal = NOT LPARA formal_literal.lit RPARA {: return new NEGLiteral(lit); :};

lit_list = literal.lit {: return new List().add(lit); :}
         | lit_list.list COMMA literal.c {: return list.add(c); :}
         ;
         
form_lit_list = formal_literal.lit {: return new List().add(lit); :}
         | form_lit_list.list COMMA formal_literal.lit {: return list.add(lit); :}
         ;

term_list = term_list_no_empty
          | /* epsilon */ {: return new List(); :}
          ;

term_list_no_empty = term.t {: return new List().add(t); :}
                   | term_list_no_empty.list COMMA term.t {: return list.add(t); :} 
                   ;
                   
term = variable
     | constant
     | pred_ref
     ;
     
pred_sym = PRED_ID.id {: return new PredicateSymbol(id); :};
pred_ref = PRED_REF.id {: return new PredicateRef(id); :};
     
variable = VAR_ID.id {: return new Variable(id); :};
constant = int_constant
         | string_constant
         ;

int_constant = NUMERAL.num {: return new IntConstant(num); :};
string_constant = STRING.str {: return new StringConstant(str); :};
