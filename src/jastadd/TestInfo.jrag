import java.util.Collections;
import java.util.ArrayList;
aspect TestInfo {
	private void Program.collectFileObjectInfo(StringBuilder sb) {
		sb.append("FILE_CONSTANTS: {");
		for(Constant c : uniqueFileObjects()){
			sb.append(c.constantValue());
			sb.append(",");
		}
		if(uniqueFileObjects().size() > 0) sb.deleteCharAt(sb.length() - 1);
		sb.append("}");
	}
	
	public void PredicateSymbol.collectInfo(StringBuilder sb) {
		if(isUse()) sb.append("USE");
		if(isDef()) sb.append("DEF");
		if(isFileFact()) sb.append("FILE_FACT");
		if(isEDBFact()) sb.append("EDB_FACT");
	}
	
	public void SuperPredicate.collectPredicateInfo(StringBuilder sb) {
		ArrayList<PredicateSymbol> predsList = new ArrayList<PredicateSymbol>(predicates());
		if(predsList.size() == 0) return;
		
		ArrayList<String> predInfo = new ArrayList<String>();
		for(PredicateSymbol pred : predsList) {
			StringBuilder sb2 = new StringBuilder();
			pred.collectInfo(sb2);
			predInfo.add(sb2.toString());
		}
		sb.append(predicateName()).append(" Arity: ").append(realArity()).append(",").append(" [");
		if(predsList.size() == 1) {
			sb.append(predInfo.get(0)).append("]");
			return;
		}
		Collections.sort(predInfo);
		sb.append(predInfo.get(0));
		for(int i = 1; i != predInfo.size(); ++i) {
			sb.append(",").append(predInfo.get(i));
		}
		sb.append("]");
	}
	
	public void Program.collectPredicateInfo(StringBuilder sb) {
		List<SuperPredicate> spreds = getSuperPredicates();
		int sizeSPreds = getNumSuperPredicate();
		if(sizeSPreds == 0) return;
		sb.append("PREDICATES: {\n");
		getSuperPredicate(0).collectPredicateInfo(sb);
		if(sizeSPreds == 1) {
			sb.append("\n}");
			return;
		}
		for(int i = 1; i != sizeSPreds; ++i) {
			sb.append("\n");
			getSuperPredicate(i).collectPredicateInfo(sb);
		}
		sb.append("\n}");
	}
	
	public void Program.collectFileRelationInfo(StringBuilder sb) {
		for(SuperPredicate sp : getSuperPredicates()) {
			sp.fileRelation().collectRelation(sb);
		}
	}
	
	public void Program.collectRelationInfo(StringBuilder sb) {
		for(SuperPredicate sp : getSuperPredicates()) {
			sp.relation.collectRelation(sb);
		}
	}

	public void Program.collectInitialMetaInfo(StringBuilder sb) {
		collectFileObjectInfo(sb);
		sb.append("\n");
		collectPredicateInfo(sb);
		sb.append("\n");
		sb.append("RELATION: [");
		collectFileRelationInfo(sb);
		sb.append("]\n");
	}
	
	public void Program.collectMetaInfo(StringBuilder sb) {
		collectInitialMetaInfo(sb);
		sb.append("INITIAL RELATION: [");
		collectRelationInfo(sb);
		sb.append("]\n");
	}
}
