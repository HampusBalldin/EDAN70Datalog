
import java.util.Comparator;

aspect Conversion {
	syn int IntConstant.intValue() = Integer.parseInt(getNUMERAL());
	public abstract String Constant.constantValue();
	public String StringConstant.constantValue() { return getSTRING();}
	public String IntConstant.constantValue() {return getNUMERAL();}
	
	public String Constant.toString() { return constantValue(); }
	public String Variable.toString() { return getVAR_ID(); }
	public String PredicateRef.toString() { return "'" + getPRED_ID(); }
	
	public String FormalPredicate.toString() { return "FP_" + predicateName(); }
}

aspect Comparison {
	public class CompareTerm implements Comparator<Term> {
		@Override
		public int compare(Term t1, Term t2) {
			int tv1 = t1.typeCompValue();
			int tv2 = t2.typeCompValue();
			if(tv1 != tv2) return tv1 < tv2 ? -1 : 1;
			return t1.toString().compareTo(t2.toString());
		}
	}
	
	public class ComparePredicates implements Comparator<PredicateInterface> {
		@Override
		public int compare(PredicateInterface t1, PredicateInterface t2) {
			if(t1.isRef() != t2.isRef()) return t1.isRef() ? -1 : 1;
			return t1.getPRED_ID().compareTo(t2.getPRED_ID());
		}
	}
	public static final ComparePredicates Program.predicateComparator = new ComparePredicates();
		@Override
	public boolean PredicateSymbol.equals(Object o) {
		if(!(o instanceof PredicateSymbol)) return false;
		return Program.predicateComparator.compare(this, (PredicateSymbol)o) == 0;
	}
	
			@Override
	public boolean PredicateRef.equals(Object o) {
		if(!(o instanceof PredicateRef)) return false;
		return Program.predicateComparator.compare(this, (PredicateSymbol)o) == 0;
	}

	public static final CompareTerm Term.termComparator = new CompareTerm();
	@Override
	public boolean Term.equals(Object o) {
		if(!(o instanceof Term)) return false;
		return termComparator.compare(this, (Term)o) == 0;
	}
	
	public class CompareFormalPredicate implements Comparator<FormalPredicate> {
		@Override
		public int compare(FormalPredicate p1, FormalPredicate p2) {
			return p1.predicateName().compareTo(p2.predicateName());
		}
	}
	
	public static final CompareFormalPredicate FormalPredicate.formalPredicateComparator = new CompareFormalPredicate();
	@Override
	public boolean FormalPredicate.equals(Object o) {
		if(!(o instanceof FormalPredicate)) return false;
		return formalPredicateComparator.compare(this, (FormalPredicate)o) == 0;
	}
}
