import java.io.PrintStream;
import java.io.ByteArrayOutputStream;
import java.util.Iterator;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.Collection;

aspect PretyPrinting {
	public void ASTNode.prettyPrint(PrettyPrinter pr) {
		for(int i = 0; i < getNumChild(); ++i) {
            pr.prettyPrint(getChild(i));
        }
	}

    protected static <T extends ASTNode> void ASTNode.printList(List<T> list,
            String pre, String post, String delim, PrettyPrinter pr) {
        if (list.getNumChild() == 0)
            return;
        pr.out.print(pre);
        pr.prettyPrint(list.getChild(0));
        if (list.getNumChild() == 1) {
            pr.out.print(post);
            return;
        }
        for (int i = 1; i != list.getNumChild(); ++i) {
            pr.out.print(delim);
            pr.prettyPrint(list.getChild(i));
        }
        pr.out.print(post);
    }
    
    protected static <T extends ASTNode> void ASTNode.printCollection(Collection<T> collection,
            String pre, String post, String delim, PrettyPrinter pr) {
        Iterator<T> itr = collection.iterator();
        if (!itr.hasNext())
            return;
        pr.out.print(pre);
        pr.prettyPrint(itr.next());
        if (!itr.hasNext()) {
            pr.out.print(post);
            return;
        }
        while(itr.hasNext()) {
            pr.out.print(delim);
            pr.prettyPrint(itr.next());
        }
        pr.out.print(post);
    }

    public String ASTNode.prettyPrint() {
        ByteArrayOutputStream bytes = new ByteArrayOutputStream();
        prettyPrint(new StandardPrettyPrinter(new PrintStream(bytes)));
        return bytes.toString();
    }

    public void ASTNode.prettyPrint(PrintStream out) {
        prettyPrint(new StandardPrettyPrinter(out));
    }

    public void PredicateSymbol.prettyPrint(PrettyPrinter pr) {
        pr.out.print(getPRED_ID());
    }

    public void StringConstant.prettyPrint(PrettyPrinter pr) {
        pr.out.print("\"" + toString() + "\"");
    }

    public void Term.prettyPrint(PrettyPrinter pr) {
        pr.out.print(toString());
    }
    
	public void TermList.prettyPrint(PrettyPrinter pr) {
        printList(getTermss(), "[", "]", " ", pr);
    }

    public void Atom.prettyPrint(PrettyPrinter pr) {
        pr.prettyPrint(getPredicate());
        printList(getTermss(), "(", ")", ", ", pr);
    }
    
    public void Rule.prettyPrint(PrettyPrinter pr) {
        printList(getHeadss(), "", "", ",", pr);
        pr.out.print(" :- ");
        printList(getBodys(), "", ".\n", ", ", pr);
    }

    public void Fact.prettyPrint(PrettyPrinter pr) {
        printList(getHeadss(), "", ".\n", ", ", pr);
    }

    public void EDBLiteral.prettyPrint(PrettyPrinter pr) {
        pr.prettyPrint(getPredicate());
        pr.out.print("(");
        pr.prettyPrint(getPredicateRef());
        pr.out.print(",");
        pr.prettyPrint(getFileLoc());
        pr.out.print(")");
    }
    
    public void NEGLiteral.prettyPrint(PrettyPrinter pr) {
    	pr.prettyPrint(getPredicate());
        pr.out.print("(");
        pr.prettyPrint(getInclusiveLiteral());
        pr.out.print(")");
    }
    
    public void BinaryExclusiveTermLiteral.prettyPrint(PrettyPrinter pr) {
    	pr.prettyPrint(getPredicate());
        pr.out.print("(");
        pr.prettyPrint(getLeft());
        pr.out.print(",");
        pr.prettyPrint(getRight());
        pr.out.print(")");
    }
}
aspect ExtensionablePrinting {
    public abstract class PrettyPrinter<T extends ASTNode> {
        public final PrintStream out;
        public abstract void prettyPrint(T node);

        public PrettyPrinter(PrintStream out) {
            this.out = out;
        }
    }

    public class StandardPrettyPrinter<T extends ASTNode> extends PrettyPrinter<T> {
        public void prettyPrint(T node) {
            node.prettyPrint(this);
        }
        public StandardPrettyPrinter(PrintStream out) {
            super(out);
        }
    }

    public class SoufflePrettyPrinter<T extends ASTNode> extends PrettyPrinter<T> {
        public void prettyPrint(T node) {
            node.soufflePrint(this);
        }
        public SoufflePrettyPrinter(PrintStream out) {
            super(out);
        }
    }
    
    public class TypePrettyPrinter<T extends ASTNode> extends PrettyPrinter<T> {
    	public void prettyPrint(T node) {
        	node.typePrint(this);
        }
        
        public TypePrettyPrinter(PrintStream out) {
            super(out);
        }
    }
    
    public class StandardStringPrettyPrinter {
    	public static <T extends ASTNode> String print(T t) {
    		ByteArrayOutputStream stream = new ByteArrayOutputStream();
    		StandardPrettyPrinter spp = new StandardPrettyPrinter(new PrintStream(stream));
    		spp.prettyPrint(t);
    		return stream.toString();
    	}
    	
    	public static <T extends ASTNode> String printList(List<T> t, String pre, String post, String delim) {
    		ByteArrayOutputStream stream = new ByteArrayOutputStream();
    		StandardPrettyPrinter spp = new StandardPrettyPrinter(new PrintStream(stream));
    		ASTNode.printList(t, pre, post, delim, spp);
    		return stream.toString();
    	}
    	
    	public static <T extends ASTNode> String printCollection(Collection<T> t, String pre, String post, String delim) {
    		ByteArrayOutputStream stream = new ByteArrayOutputStream();
    		StandardPrettyPrinter spp = new StandardPrettyPrinter(new PrintStream(stream));
    		ASTNode.printCollection(t, pre, post, delim, spp);
    		return stream.toString();
    	}
    }
}

aspect TypePrinting {
    public String ASTNode.typePrint() {
        ByteArrayOutputStream bytes = new ByteArrayOutputStream();
        TypePrettyPrinter typePrinter = new TypePrettyPrinter(new PrintStream(bytes));
        typePrinter.prettyPrint(this);
        return bytes.toString();
    }

    public void ASTNode.typePrint(PrettyPrinter pr) {
        prettyPrint(pr);
    }
    
    public static String Program.transformPredefinedName(String l) {
    	return l.charAt(0) + l.substring(1).toLowerCase();
    }
    
    public void NEGLiteral.typePrint(PrettyPrinter pr) { getInclusiveLiteral().typePrint(pr); }
    public void InclusiveLiteral.typePrint(PrettyPrinter pr) {
    	PseudoTuple tuple = toTuple();
    	List types = new List();
    	for(int i = 0; i != tuple.arity(); ++i) {
    		Term t = tuple.coord(i);
    		if(t.isVariable()) types.add(t);
	 		else types.add(t.type());
    	}
    	if(isAtom())
	 		pr.out.print(predicate().getPRED_ID());
	 	else
	 		pr.out.print(Program.transformPredefinedName(predicate().getPRED_ID()));
	 	printList(types, "(", ")", ", ", pr);
    }
    
    public void BinaryExclusiveTermLiteral.typePrint(PrettyPrinter pr) {
    	TreeSet<Term> terms = new TreeSet<Term>(Term.termComparator);
    	terms.addAll(variables());
    	for(Constant c : constants())
    		terms.add(c.type());
    	printCollection(terms, "EQLIST([", "])", " ", pr);
    }
    
    public void BINDLiteral.typePrint(PrettyPrinter pr) {
    	TreeSet<Term> terms = new TreeSet<Term>(Term.termComparator);
    	terms.add(getVariable());
    	terms.addAll(getRight().variables());
    	for(Constant c : getRight().constants())
    		terms.add(c.type());
    	printCollection(terms, "EQLIST([", "])", " ", pr);
    }
    
    public void EQLISTLiteral.typePrint(PrettyPrinter pr) {
    	TreeSet<Term> terms = new TreeSet<Term>(Term.termComparator);
    	for(Term t : terms) {
    		if(t.isVariable()) terms.add(t);
    		else terms.add(t.type());
    	}
    	printCollection(terms, "EQLIST([", "])", " ", pr);
    }
    
    public void Rule.typePrint(PrettyPrinter pr) {
	 	pr.out.print("Rule" + index());
	 	printCollection(variables(), "(", ")", ", ", pr);
	 	pr.out.print(" :- ");
	 	printCollection(literals(), "", ".\n", ", ", pr);
	 	
	 	// Limited Type Inference Right to Left
	 	printList(getHeadss(), "", " :- ", ", ", pr);
	 	printList(getBodys(), "", ".", ", ", pr);
	 }
	 
	public void Program.typePrint(PrettyPrinter pr) {
		MapToSetOf<FormalPredicate, PseudoTuple> initial = pass1TypeMap();
		for(FormalPredicate fp : initial.keySet()) {
			PseudoTuple type = initial.get(fp).iterator().next();
			if(fp.literal().isAtom())
				printList(type.toList(), fp.predicateName() + "(", ").\n", ", ", pr);
			else
				printList(type.toList(), Program.transformPredefinedName(fp.predicateName()) + "(", ").\n", ", ", pr);
		}
		HashSet<Rule> rules = new HashSet<Rule>();
		for(Clause c : getClauses()) {
			if(!c.isRule()) continue;
			rules.add((Rule)c);
		}
		printCollection(rules, "", "", "\n", pr);
	}
}

aspect SoufflePrinting {
    public void ASTNode.soufflePrint(String path) throws IOException {
        File file = new File(path);
        FileOutputStream fop = new FileOutputStream(file);
        SoufflePrettyPrinter soufflePrinter = new SoufflePrettyPrinter(new PrintStream(fop));
        soufflePrinter.prettyPrint(this);
        fop.close();
    }

    public String ASTNode.soufflePrint() {
        ByteArrayOutputStream bytes = new ByteArrayOutputStream();
        SoufflePrettyPrinter soufflePrinter = new SoufflePrettyPrinter(new PrintStream(bytes));
        soufflePrinter.prettyPrint(this);
        return bytes.toString();
    }

    public void ASTNode.soufflePrint(PrettyPrinter pr) {
        prettyPrint(pr);
    }
// A Hack to remove the DOT that is inserted after each rule.
    public void EDBLiteral.soufflePrint(PrettyPrinter pr)    { pr.out.print("// EDB");    }
    public void OUTPUTLiteral.soufflePrint(PrettyPrinter pr) { pr.out.print("// OUTPUT"); }
    public void PREDLiteral.soufflePrint(PrettyPrinter pr)   { pr.out.print("// PRED"); }
    public void ATOMLiteral.soufflePrint(PrettyPrinter pr)   { pr.out.print("// ATOM"); }
    
    public void NEGLiteral.soufflePrint(PrettyPrinter pr) {
    	pr.out.print("!");
        pr.prettyPrint(getInclusiveLiteral());
    }
    
    public abstract String BinaryExclusiveTermLiteral.souffleOPString();
    public String EQLiteral.souffleOPString()  { return  "="; }
	public String NEQLiteral.souffleOPString() { return "!="; }
	public String LTLiteral.souffleOPString()  { return "<";  }
	public String LTELiteral.souffleOPString() { return "<="; }
	public String GTLiteral.souffleOPString()  { return ">";  }
	public String GTELiteral.souffleOPString() { return ">="; }
	
    public void BinaryExclusiveTermLiteral.soufflePrint(PrettyPrinter pr) {
        pr.prettyPrint(getLeft());
        pr.out.print(" ");
        pr.out.print(souffleOPString());
        pr.out.print(" ");
        pr.prettyPrint(getRight());
    }
    
    public String Term.souffleType()           { return "NO_TYPE"; }
    public String StringConstant.souffleType() { return "symbol"; }
    public String IntConstant.souffleType()    { return "number"; }
    
    
    public void FormalPredicate.soufflePrint(PrettyPrinter pr) {
    	if(!literal().hasExtendedSemantics()) {
	        pr.out.print(".decl " + predicateName() + "(");
	        List<PredicateSymbol> constants = new List<PredicateSymbol>();
	        for(int i = 0; i != realArity(); ++i) {
	            constants.add(new PredicateSymbol("x_" + i + ":symbol"));
	        }
	        printList(constants, "", "", ", ", pr);
	        pr.out.print(")\n");
	        pr.out.print(".output " + predicateName() + "(delimiter=\",\")");
        }
        
        if(literal().isEDB()) {
        	EDBLiteral edb = (EDBLiteral)literal();
        	pr.out.print("\n.input ");
	        pr.out.print(edb.getPredicateRef().getPRED_ID());
	        pr.out.print("(filename=");
	        pr.prettyPrint(edb.getFileLoc());
	        pr.out.print(", delimiter=\",\"");
	        pr.out.print(")");
        }
    }

    public void Program.soufflePrint(PrettyPrinter pr) {
        printList(getFormalPredicates(), "", "\n", "\n", pr);
        prettyPrint(pr);
    }
}
