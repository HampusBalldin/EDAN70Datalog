/**
	Program
**/
Program  ::= Clause* /FormalPredicate*/; 

/**
   Clause 
**/
abstract Clause ::= Heads:InclusiveLiteral*;
Rule:Clause ::=  Body:Literal*;
Fact:Clause;

/**
   Literals 
**/
abstract Literal ::= Predicate:PredicateSymbol;
abstract InclusiveLiteral:Literal;
abstract ExclusiveLiteral:Literal;
abstract BinaryExclusiveTermLiteral:ExclusiveLiteral ::= Left:Expr Right:Expr;

// abstract BinaryMonoidTermLiteral:ExclusiveLiteral ::= Left:Term Right:Term;

Atom:InclusiveLiteral          ::= Terms:Term*;
EDBLiteral:InclusiveLiteral    ::= PredicateRef FileLoc:Term;
OUTPUTLiteral:InclusiveLiteral ::= Term;
PREDLiteral:ExclusiveLiteral   ::= Term /PredicateRef*/;
ATOMLiteral:ExclusiveLiteral   ::= Term /PredicateRef*/;
NEGLiteral:ExclusiveLiteral    ::= InclusiveLiteral;

// BINDLiteral:ExclusiveLiteral ::= Left:Variable Right:BinaryExclusiveTermLiteral;

EQLiteral:BinaryExclusiveTermLiteral;
NEQLiteral:BinaryExclusiveTermLiteral;
LTLiteral:BinaryExclusiveTermLiteral;
LTELiteral:BinaryExclusiveTermLiteral;
GTLiteral:BinaryExclusiveTermLiteral;
GTELiteral:BinaryExclusiveTermLiteral;

/**
	Expressions
**/
abstract Expr;
abstract BinExpr:Expr ::= Left:Expr Right:Expr;
AddExpr:BinExpr;

/**
    Terms
**/
abstract Term:Expr;
abstract Constant:Term;

Variable:Term           ::= <VAR_ID>;
PredicateRef:Term       ::= <PRED_ID>;
StringConstant:Constant ::= <STRING>;
IntConstant:Constant    ::= <NUMERAL>;

/**
    PredicateSymbols
**/
FormalPredicate ::= <PRED_ID>;
PredicateSymbol ::= <PRED_ID>;