import java.util.HashSet;
import java.util.HashMap;
import java.util.TreeSet;
import java.util.Comparator;
import lang.relation.Relation;
import lang.relation.PseudoTuple;

aspect ModelObjectsAndPredicates {
    syn Constant Variable.Instantiation() = null;

	/**
	 * Collect All Objects available in the File.
	 */ 
    coll HashSet<Constant> Program.modelObjects() [new HashSet<Constant>()] with add;
    Constant contributes this
        when true
        to Program.modelObjects();

    syn TreeSet<Constant> Program.uniqueFileObjects() {
        TreeSet<Constant> uniqueFileObjects = new TreeSet<>(Constant.constantComparator);
        uniqueFileObjects.addAll(modelObjects());
        return uniqueFileObjects;
    }
    
    public TreeSet<Constant> Program.objects = new TreeSet<Constant>(Constant.constantComparator);

	/**
	 * Collect Predicates
	 */ 
    coll HashSet<PredicateSymbol> Program.predicateSymbols() [new HashSet<PredicateSymbol>()] with add;
    PredicateSymbol contributes this
        when true
        to Program.predicateSymbols();
    syn TreeSet<PredicateSymbol> Program.uniquePredicateSymbols() {
        TreeSet<PredicateSymbol> uniquePredicateSymbols = new TreeSet<>(PredicateSymbol.predicateSymbolComparator);
        uniquePredicateSymbols.addAll(predicateSymbols());
        return uniquePredicateSymbols;
    }

	/**
	 * Construct Map from a Predicate Name to all Occurrences of the Predicate
	 */ 
    syn HashMap<String, HashSet<PredicateSymbol>> Program.predicateMap() {
        HashMap<String, HashSet<PredicateSymbol>> predicateMap = new HashMap<String, HashSet<PredicateSymbol>>();
        for(PredicateSymbol pred : uniquePredicateSymbols()) {
            predicateMap.put(pred.getID(), new HashSet<PredicateSymbol>());
        }
        for(PredicateSymbol pred : predicateSymbols()) {
            HashSet<PredicateSymbol> predSet = predicateMap.get(pred.getID());
            predSet.add(pred);
        }
        return predicateMap;
    }
}

aspect Arity {
    syn int Literal.arity();
    eq EDBLiteral.arity() = -1;
    eq RealLiteral.arity() = getNumTerms();
    syn int PredicateSymbol.arity() = literal().arity();
    
    syn HashSet<Integer> SuperPredicate.arities() {
    	HashSet<Integer> arities = new HashSet<Integer>();
    	for(PredicateSymbol pred : predicates())
            arities.add(pred.arity());
        return arities;
    }
    
    syn HashSet<Integer> SuperPredicate.realArities() {
        HashSet<Integer> realArities = new HashSet<Integer>(arities());
        realArities.remove(-1);
        return realArities;
    }
    
    syn boolean SuperPredicate.uniqueArity() {
        return realArities().size() == 1;
    }

    syn int SuperPredicate.realArity() {
        if(!uniqueArity()) return 0;
        return realArities().iterator().next();
    }
    
    SuperPredicate contributes ("Different Arities for predicate symbol: " + predicateName())
        when !uniqueArity() && arities().size() != 1
        to Program.semanticErrors();
}

aspect Relation {
	public Relation SuperPredicate.relation;
	
	syn Relation SuperPredicate.fileRelation() {
		Relation r = new Relation(this, realArity());
		for(PredicateSymbol pred : predicates()) {
			if(pred.isFileFact()) {
				r.addTuple(new PseudoTuple((RealLiteral)pred.literal()));
			}
		}
		return r;
	}
}

aspect Rules {
	syn HashSet<Rule> SuperPredicate.useInRules() {
		HashSet<Rule> rules = new HashSet<Rule>();
		for(PredicateSymbol pred : predicates()) {
			if(pred.isUse()) {
				rules.add((Rule)pred.literal().stmt());
			}
		}
		return rules;
	}
	
	syn HashSet<Rule> SuperPredicate.definedInRules() {
		HashSet<Rule> rules = new HashSet<Rule>();
		for(PredicateSymbol pred : predicates()) {
			if(pred.isDef()) {
				rules.add((Rule)pred.literal().stmt());
			}
		}
		return rules;
	}
}
